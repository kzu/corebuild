<?xml version="1.0" encoding="utf-8"?>
<!-- 
=================================================================
                   CoreBuild Boostrapper

This targets will perform initial download, update and setup of 
corebuild. Just run `msbuild` (or `msbuild /t:update`) and it 
will be replaced with an actual clean starting point for 
authoring a corebuild script.
=================================================================
-->
<Project DefaultTargets="Update" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
	
	<PropertyGroup>
		<UpdateBaseUrl>https://raw.githubusercontent.com/kzu/corebuild/master/src/</UpdateBaseUrl>
		<PS Condition="'$(PS)' == ''">%WINDIR%\System32\WindowsPowerShell\v1.0\powershell.exe</PS>
		<Curl Condition="'$(Curl)' == ''">curl -k -f -L</Curl>
	</PropertyGroup>

	<ItemGroup>
		<Updatable Include="build.cmd" />
		<Updatable Include="build.proj" />
		<Updatable Include="build/corebuild.props" />
		<Updatable Include="build/corebuild.targets" />
		<Updatable Include="build/update.targets" />
	</ItemGroup>

	<Target Name="Update">
		<MakeDir Directories="$(MSBuildThisFileDirectory)build" Condition="!Exists('$(MSBuildThisFileDirectory)build')"	 />
		<Exec Command='$(Curl) -o "$(MSBuildThisFileDirectory)%(Updatable.Identity)" "$(UpdateBaseUrl)%(Updatable.Identity)"'
			  Condition="'$(OS)' != 'Windows_NT'"/>

		<Exec Command='"$(PS)" -NoProfile -Command "&amp; { Invoke-WebRequest -Uri $(UpdateBaseUrl)%(Updatable.Identity) -OutFile &quot;$(MSBuildThisFileDirectory)%(Updatable.Identity)&quot; -UseBasicParsing }"'
			  EchoOff="true"
			  Condition="'$(OS)' == 'Windows_NT'" />
		
		<!-- Self-update the downloaded files so they get the proper ETags -->
		<Exec Command='"$(MSBuildToolsPath)\MSBuild.exe" "$(MSBuildThisFileFullPath)" /t:Restore /v:Minimal' />
		<Exec Command='"$(MSBuildToolsPath)\MSBuild.exe" "$(MSBuildThisFileFullPath)" /t:Update /v:Minimal' />
	</Target>

</Project>